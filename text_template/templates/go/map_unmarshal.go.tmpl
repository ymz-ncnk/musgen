{{- /* SimpleTypeVar */ -}}
{
  {{- $pt := (ParsePtrType .Type)}}
  {{- $vn := .VarName}}
  {{- if $pt.Valid }}{{$vn = print "(" $pt.Stars .VarName ")"}}{{ end }}
  var length int
  {{ include "int_unmarshal.go.tmpl" (SetUpVarName (MakeSimpleType "int" .Unsafe .Suffix) "length") }}
  if length < 0 {
    return i, errs.ErrNegativeLength
  }
  {{- if ne .MaxLength 0 }}
    if length > {{.MaxLength}} {
      err = errs.ErrMaxLengthExceeded
    } else {
  {{- end }}
    {{$vn}} = make({{ClearMapType $pt.Type}})
    {{- $mpt := (ParseMapType $pt.Type)}}
    {{- $kevn := MapKeyVarName .VarName }}
    {{- $vlvn := MapValueVarName .VarName }}
    for ; length > 0; length-- {
      {{- if (ParsePtrType $mpt.Key).Valid }}
        {{- include "initptrvar.go.tmpl" (MakeVar $kevn $mpt.Key true) }}
      {{- else }}
        var {{$kevn}} {{ClearMapType $mpt.Key}}
      {{- end }}
      {{- if (ParsePtrType $mpt.Value).Valid }}
        {{- include "initptrvar.go.tmpl" (MakeVar $vlvn $mpt.Value true) }}
      {{- else }}
        var {{$vlvn}} {{ClearMapType $mpt.Value}}
      {{- end }}
      {{ include "simpletypes.go.tmpl" (MakeTmplData (SetUpVarName (MakeValidSimpleType $mpt.Key .KeyValidator 0 .Unsafe .Suffix .KeyEncoding) $kevn) "unmarshal") }}
      if err != nil {
        err = errs.NewMapKeyError({{$kevn}}, err)
        break
      }
      {{ include "simpletypes.go.tmpl" (MakeTmplData (SetUpVarName (MakeValidSimpleType $mpt.Value .ElemValidator 0 .Unsafe .Suffix .ElemEncoding) $vlvn) "unmarshal") }}
      if err != nil {
        err = errs.NewMapValueError({{$kevn}}, {{$vlvn}}, err)
        break
      }
      ({{$vn}})[{{$kevn}}] = {{$vlvn}}
    }
  {{- if ne .MaxLength 0 }}
    }
  {{- end }}
}