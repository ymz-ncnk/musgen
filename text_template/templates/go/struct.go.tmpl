// Code generated by musgen. DO NOT EDIT.

{{/* TypeDesc */}}
package {{.Package}}

// Marshal{{.Suffix}} fills buf with the MUS encoding of v.
func (v {{.Name}}) Marshal{{.Suffix}}(buf []byte) int {
  i := 0
  {{- $unsafe := .Unsafe }}
  {{- $suffix := .Suffix}}
  {{- range $index, $field := .Fields }}
    {{ include "simpletypes.go.tmpl" (MakeTmplData (SetUpVarName (MakeSimpleTypeFromField $field $unsafe $suffix) (print "v." $field.Name)) "marshal") }}
  {{- end }}
  return i
}

// Unmarshal{{.Suffix}} parses the MUS-encoded buf, and sets the result to *v.
func (v *{{.Name}}) Unmarshal{{.Suffix}}(buf []byte) (int, error) {
  i := 0
  {{- $unsafe := .Unsafe }}
  {{- $suffix := .Suffix}}
  var err error
  {{- range $index, $field := .Fields }}
    {{- $fvn := (print "v." $field.Name) }}
    {{- if (ParsePtrType $field.Type).Valid }}
      {{- include "initptrvar.go.tmpl" (MakeVar $fvn $field.Type false) }}
    {{- end }}
    {{ include "simpletypes.go.tmpl" (MakeTmplData (SetUpVarName (MakeSimpleTypeFromField $field $unsafe $suffix) $fvn) "unmarshal") }}
    if err != nil {
      return i, errs.NewFieldError({{print "\"" $field.Name "\""}}, err)
    }
  {{- end }}
  return i, err
}

// Size{{.Suffix}} returns the size of the MUS-encoded v.
func (v {{.Name}}) Size{{.Suffix}}() int {
  size := 0
  {{- $unsafe := .Unsafe }}
  {{- $suffix := .Suffix}}
  {{- range $index, $field := .Fields }}
    {{ include "simpletypes.go.tmpl" (MakeTmplData (SetUpVarName (MakeSimpleTypeFromField $field $unsafe $suffix) (print "v." $field.Name)) "size") }}
  {{- end }}
  return size
}